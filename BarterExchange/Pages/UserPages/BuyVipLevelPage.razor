@page "/buy-vip-level"

@inject UserService UserService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

@if (UserService.IsAuthorized())
{
    <div class="card" style="width: 30%; margin: 100px 25% 0 25%">
        <div class="card-header">
            <h4 style="display: flex; justify-content:center">Покупка подписки приоритета</h4>
        </div>
        <div class="card-body">
            <div class="form-group">
                <MudSelect @bind-Value="levelString" T="string" Label="Уровень приоритета" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.CenterRight"
                       Variant="Variant.Filled" AdornmentColor="Color.Primary" SelectedValuesChanged="CalculateCost">
                    @foreach (var s in levelStrings)
                    {
                        <MudSelectItem T="string" Value="@s">@s</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="form-group">
                <MudSelect @bind-Value="period" T="string" Label="Период подписки" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.CenterRight"
                       Variant="Variant.Filled" AdornmentColor="Color.Primary" SelectedValuesChanged="CalculateCost">
                    @foreach (var s in periods)
                    {
                        <MudSelectItem T="string" Value="@s">@s</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="form-group" style="display: flex; justify-content:center; margin: 3% 0 0 0">
                @if (cost != null)
                {
                    if (UserService.CurrentUser.VipLevel == 0)
                    {
                        <MudTooltip Text=@($"Дата окончания подписки после покупки: {DateTime.Now.AddDays(1 + countDays).ToShortDateString()}")>
                            <MudTextField @bind-Value="cost" Label="Стоимость подписки" Style="width: 200px" Immediate="true" Variant="Variant.Text" ReadOnly=true></MudTextField>
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text=@($"Дата окончания подписки после покупки: {UserService.CurrentUser.EndDateVipLevel.AddDays(1 + countDays).ToShortDateString()}")>
                            <MudTextField @bind-Value="cost" Label="Стоимость подписки" Style="width: 200px" Immediate="true" Variant="Variant.Text" ReadOnly=true></MudTextField>
                        </MudTooltip>
                    }
                }
                <button class="btn btn-primary" @onclick=Buy style="margin: 10px">Купить</button>
            </div>
        </div>
    </div>
}
else
{
    <NotAuthorizedComponent></NotAuthorizedComponent>
}

@code {
    List<String> levelStrings = new List<String>();
    List<String> periods = new List<String> { "День", "Неделя", "Месяц" };
    String levelString;
    String period;
    String cost;
    int countDays;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        for(int i = 0; i < Storage.VipLevelCostByDay.Length; i++)
        {
            levelStrings.Add($"{i + 1} уровень");
        }
    }

    private void Buy()
    {
        if(cost != null)
        {
            var lvl = int.Parse(levelString.Substring(0, 1));
            if(UserService.CurrentUser.VipLevel == 0 || UserService.CurrentUser.VipLevel == lvl)
            {
                UserService.BuyVipLevel(UserService.CurrentUser.Email, lvl, countDays);
                Navigation.NavigateTo("profile");
                Snackbar.Add($"Подписка {UserService.CurrentUser.VipLevel} уровня действует до {UserService.CurrentUser.EndDateVipLevel.AddDays(1).ToShortDateString()}", Severity.Info);
            }
            else
            {
                Snackbar.Add("Чтобы купить подписку нового уровня, дождитесь пока закончится текущая подписка!", Severity.Warning);
            }
        }
    }

    private void CalculateCost()
    {
        if(levelString != null && period != null)
        {
            if(int.TryParse(levelString.Substring(0, 1), out int level))
            {
                switch(period)
                {
                    case "День":
                        countDays = 1;
                        break;
                    case "Неделя":
                        countDays = 7;
                        break;
                    
                    case "Месяц":
                        countDays = 30;
                        break;
                    default:
                        break;
                }

                cost = (Storage.VipLevelCostByDay[level - 1] * countDays).ToString() + " рублей";
            }
        }
    }
}
