@page "/main-offer"

@inject NavigationManager Navigation
@inject ExchangeOrderService ExchangeOrderService
@inject ISnackbar Snackbar

<div class="block-1">
    <div style="width: 100%;">
        <div style="width: 50%; float: left">
            <div class="header">
                <h3 style="display: flex; justify-content:center">Ваши предметы: </h3>
            </div>
            <div class="card-group">
                @foreach (var exch in ExchangeOrderService.SenderOrders)
                {
                    <MudCard Outlined="true" style="width: 280; margin: 2%">
                        <MudCardHeader Style="height: 20px">
                            <CardHeaderAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="() => RemoveOrder(exch)" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudImage Src=@("Images/" + @exch.PhotoName) Elevation="25" Class="rounded-lg" Width="250" Height="250" />
                        </MudCardContent>
                        <MudCardActions style="display: flex; justify-content:center">
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(exch.ExchangeOrderId)">@ExchangeOrderService.CutName(exch.Title)</MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            </div>
            <div class="form-group" style="display: flex; justify-content:center; margin: 0 0 5% 0">
                <button class="btn btn-primary" @onclick=SenderOfferExchange>Добавить предмет для обмена</button>
            </div>
        </div>
        <div style="width: 50%; float: left">
            <div class="header">
                <h3 style="display: flex; justify-content:center">Предметы на обмен: </h3>
            </div>
            <div class="card-group">
                @foreach (var exch in ExchangeOrderService.RecepientOrders)
                {
                    <MudCard Outlined="true" style="width: 280; margin: 2%">
                        <MudCardHeader Style="height: 20px">
                            <CardHeaderAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="() => RemoveOrder(exch)" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent >
                            <MudImage Src=@("Images/" + @exch.PhotoName) Elevation="25" Class="rounded-lg" Width="250" Height="250" />
                        </MudCardContent>
                        <MudCardActions style="display: flex; justify-content:center">
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(exch.ExchangeOrderId)">@ExchangeOrderService.CutName(exch.Title)</MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            </div>
            <div class="form-group" style="display: flex; justify-content:center; margin: 0 0 5% 0">
                <button class="btn btn-primary" @onclick=RecepientOfferExchange>Добавить предмет для обмена</button>
            </div>
        </div>
    </div>
</div>
<div style="width: 100%; display: flex; justify-content:center; margin: 0 0 5% 0">
    <button class="btn btn-primary" @onclick=SaveOfferExchange style="display: block; margin-left: auto; margin-right: auto">Предложить обмен</button>
</div>


@code {

    private void OpenOrderPage(int id)
    {
        Navigation.NavigateTo("/order");
    }

    private void SenderOfferExchange()
    {
        if(ExchangeOrderService.ValueItemType != 0 && ExchangeOrderService.SenderOrders.Count() != 0)
        {
            Snackbar.Add("Предметы для создания рекомендованного обмена уже добавлены!", Severity.Warning);
            return;
        }
        Navigation.NavigateTo("/offer-exchange-orders");
        ExchangeOrderService.IsSenderOrders = true;
    }

    private void RecepientOfferExchange()
    {
        if (ExchangeOrderService.ValueItemType != 0 && ExchangeOrderService.RecepientOrders.Count() != 0)
        {
            Snackbar.Add("Предметы для создания рекомендованного обмена уже добавлены!", Severity.Warning);
            return;
        }
        Navigation.NavigateTo("/offer-exchange-orders");
        ExchangeOrderService.IsSenderOrders = false;
    }

    private void SaveOfferExchange()
    {
        if (!ExchangeOrderService.CheckFullnessList())
        {
            Snackbar.Add("Для создания обмена предметы должны предоставляться с двух сторон участников обмена!", Severity.Error);
            return;
        }

        if(ExchangeOrderService.CheckExchangeOrderOffer())
        {
            Snackbar.Add("Такой обмен уже создан!", Severity.Warning);
            return;
        }

        ExchangeOrderService.SaveExchageOrderOffer();
        ExchangeOrderService.ClearLists();
        Navigation.NavigateTo("/main");
        Snackbar.Add("Предложение обмена успешно создано!", Severity.Success);
    }

    public void RemoveOrder(ExchangeOrder order)
    {
        if(order.ExchangeOrderId == ExchangeOrderService.RecepientOrders.First().ExchangeOrderId)
        {
            Snackbar.Add("Нельзя удалять первоначальный предмет обмена!", Severity.Error);
            return;
        }

        if(ExchangeOrderService.ValueItemType != 0)
        {
            Snackbar.Add("Нельзя удалять предметы из рекомендованного обмена!", Severity.Error);
            return;
        }

        foreach(var o in ExchangeOrderService.SenderOrders)
        {
            if(order.ExchangeOrderId == o.ExchangeOrderId)
            {
                ExchangeOrderService.SenderOrders.Remove(o);
                Snackbar.Add("Предмет успешно удален из создаваемого предложения обмена!", Severity.Success);
                return;
            }
        }

        foreach (var o in ExchangeOrderService.RecepientOrders)
        {
            if (order.ExchangeOrderId == o.ExchangeOrderId)
            {
                ExchangeOrderService.RecepientOrders.Remove(o);
                Snackbar.Add("Предмет успешно удален из создаваемого предложения обмена!", Severity.Success);
                return;
            }
        }
    }
}
