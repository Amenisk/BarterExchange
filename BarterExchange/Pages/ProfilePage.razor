@page "/profile"

@inject UserService UserService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

@if (UserService.CurrentUser != null)
{
    <MudCard style="width: 50%; margin: 100px 25% 0 25%">
        <MudCardHeader>
            <CardHeaderContent>
                <h3>Профиль</h3>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudTooltip Text="Редактировать профиль">
                    <MudIconButton Icon="@Icons.Material.Filled.Create" OnClick="EditProfile"></MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Выйти из аккаунта">
                    <MudIconButton Icon="@Icons.Material.Filled.Logout" Style="justify-content:right" OnClick="LogOut"></MudIconButton>
                </MudTooltip>            
            </CardHeaderActions>
        </MudCardHeader>
        <div class="card-header">
            <div style="display: flex; justify-content:right">         
                @if(UserService.CurrentUser.VipLevel != 0)
                {
                    <MudTooltip Text=@($"Дата окончания подписки: {UserService.CurrentUser.EndDateVipLevel.AddDays(1).ToShortDateString()}")>
                        <NavLink href="buy-vip-level">Уровень приоритетности - @UserService.CurrentUser.VipLevel</NavLink>
                    </MudTooltip>
                }
                else
                {
                    <NavLink style="display: flex; justify-content:right" href="buy-vip-level">Уровень приоритетности - @UserService.CurrentUser.VipLevel</NavLink>
                }
            </div>
        </div>
        <div class="card-body">
            <div>
                <MudTextField @bind-Value="name" ReadOnly="readOnly" Label="Имя" HelperText="@helperText" Style="font-size: 24px" Immediate="true" Variant="Variant.Text"></MudTextField>
            </div>
            <div>
                <MudTextField @bind-Value="surname" ReadOnly="readOnly" Label="Фамилия" HelperText="@helperText" Style="font-size: 24px" Immediate="true" Variant="Variant.Text"></MudTextField>
            </div>
            <div>
                <MudTextField @bind-Value="email" ReadOnly="true" Label="Email" Style="font-size: 24px" Immediate="true" Variant="Variant.Text"></MudTextField>
            </div>
            <div>
                <MudTextField @bind-Value="phoneNumber" ReadOnly="true" Label="Телефон" Style="font-size: 24px" Immediate="true" Variant="Variant.Text"></MudTextField>
            </div>
            <div>
                <MudTextField @bind-Value="password" ReadOnly="readOnly" Label="Пароль" HelperText="@helperText" Style="font-size: 24px" Immediate="true" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End"
                              AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestClick" AdornmentAriaLabel="Показать пароль"></MudTextField>
            </div>
            @if(!readOnly)
            {
                <div class="form-group" style="display: flex; justify-content:center; margin: 3% 0 0 0">
                    <button class="btn btn-primary" @onclick=SaveProfile>Сохранить</button>
                </div>
            }           
        </div>
    </MudCard>
}


@code {
    string name = "";
    string surname = "";
    string email = "";
    string phoneNumber = "";
    string password = "";
    string helperText = "";
    bool readOnly = true;
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        name = UserService.CurrentUser.Name;
        surname = UserService.CurrentUser.Surname;
        email = UserService.EncodeDecrypt(UserService.CurrentUser.Email, Storage.Key);
        phoneNumber = UserService.EncodeDecrypt(UserService.CurrentUser.PhoneNumber, Storage.Key);
        password = UserService.EncodeDecrypt(UserService.CurrentUser.Password, Storage.Key);
    }


    private void ButtonTestClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private void EditProfile()
    {
        if(readOnly)
        {
            readOnly = false;
            helperText = "Это поле можно отредактировать";
        }
        else
        {
            Snackbar.Add("Сначала сохраните прошлые изменения!", Severity.Warning);
        }

    }

    private void SaveProfile()
    {
        if(!readOnly)
        {   
            if (UserService.CurrentUser.Name != name || UserService.CurrentUser.Surname != surname 
                || UserService.CurrentUser.Password != UserService.EncodeDecrypt(password, Storage.Key))
            {
                EncryptData();
                var user = new User(name, surname, email, phoneNumber, password);
                user.SetLevel(UserService.CurrentUser.VipLevel);
                user.SetEndDateVipLevel(UserService.CurrentUser.EndDateVipLevel);
                UserService.EditUserProfile(user);
                EncryptData();
                Snackbar.Add("Профиль успешно изменен!", Severity.Success);
            }


            readOnly = true;
            helperText = "";
        }
    }

    private void LogOut()
    {
        UserService.LogOut();
        Navigation.NavigateTo("/main");
        Storage.Nav.Reload();
        Snackbar.Add("Выход из аккаунта произошел успешно!", Severity.Success);
    }  

    private void EncryptData()
    {
        email = UserService.EncodeDecrypt(email, Storage.Key);
        phoneNumber = UserService.EncodeDecrypt(phoneNumber, Storage.Key);
        password = UserService.EncodeDecrypt(password, Storage.Key);
    }
}
