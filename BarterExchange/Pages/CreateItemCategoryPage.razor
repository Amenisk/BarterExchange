@page "/create-item-category"
@inject ItemService ItemService

<div class="card" style="width: 40%; margin: 100px 30% 0 30%">
    <div class="card-header">
        <h3 style="display: flex; justify-content:center; align-content: center" >Создание категории предмета обмена</h3>
    </div>
    <div class="card-body">
        <div class="form-group">
            <MudTextField @bind-Value="titleItemCategory" Label="Название категории" Clearable="true" Immediate="true" Variant="Variant.Filled"></MudTextField>
        </div>
        <div class="form-group" style="display: flex; justify-content:center; margin: 3%">
            <button class="btn btn-primary" @onclick=CreateCategory>Создать категорию</button>
        </div>
    </div>
</div>

<div class="card" style="width: 40%; margin: 100px 30% 0 30%">
    <div class="card-header">
        <h3 style="display: flex; justify-content:center; align-content: center">Удаление категории предмета обмена</h3>
    </div>
    <div class="card-body">
        <div class="form-group">
            <div class="card-body">
                <MudSelect @bind-Value="titleDeletedItemCategory" T="string" Label="Категория предмета обмена" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.CenterRight"
                           Variant="Variant.Filled" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
                    @foreach (var s in allTitlesItemCategories)
                    {
                        <MudSelectItem T="string" Value="@s">@s</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </div>
        <div class="form-group" style="display: flex; justify-content:center; margin: 3%">
            <button class="btn btn-primary" @onclick=DeleteCategory>Удалить категорию</button>
        </div>
    </div>
</div>

@if (isError)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@code {
    string titleItemCategory = "";
    string titleDeletedItemCategory = "";
    bool isError = false;
    string errorMessage = "";
    List<string> allTitlesItemCategories = new List<string>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        allTitlesItemCategories = ItemService.GetTitlesItemCategories();
    }

    private void CreateCategory()
    {
        isError = false;

        if (titleItemCategory != "")
        {
            if (!ItemService.CheckItemCategory(titleItemCategory))
            {
                ItemService.CreateItemCategory(new ItemCategory(titleItemCategory));
                allTitlesItemCategories = ItemService.GetTitlesItemCategories();
                titleItemCategory = "";
            }
            else
            {
                isError = true;
                errorMessage = "Такая категория уже существует!";
            }
        }
        else
        {
            isError = true;
            errorMessage = "Заполните поле названия категории!";
        }
    }

    private void DeleteCategory()
    {
        isError = false;

        if (ItemService.CheckItemCategoryBeforeDelete(titleDeletedItemCategory))
        {
            isError = true;
            errorMessage = "Перед удалением категории удалите все типы предметов, связанных с этой категорией";
        }
        else
        {
            ItemService.DeleteItemCategory(titleDeletedItemCategory);
            allTitlesItemCategories = ItemService.GetTitlesItemCategories();
            titleDeletedItemCategory = "";
        }     
    }
}
