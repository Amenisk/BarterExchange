@page "/registration"
@inject UserService UserService
@inject NavigationManager Navigation

<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />


@if (!UserService.IsAuthorized())
{
    <div class="card" style="width: 50%; margin: 100px 25% 0 25%">
        <div class="card-header">
            <h3 style="display: flex; justify-content:center">Регистрация</h3>
        </div>
        <div class="card-body">
            <div class="form-group">
                <MudTextField @bind-Value="reg_name" Label="Имя" Clearable="true" Immediate="true" Variant="Variant.Filled"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="reg_surname" Label="Фамилия" Clearable="true" Immediate="true" Variant="Variant.Filled"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="reg_email" Label="Электронная почта" Clearable="true" Immediate="true" Variant="Variant.Filled"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="reg_phoneNumber" Label="Номер телефона" Clearable="true" Immediate="true" Variant="Variant.Filled"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="reg_pass" InputType="@PasswordInput" Clearable="true" Immediate="true" Label="Пароль" Variant="Variant.Filled" Adornment="Adornment.End"
                          AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestClick" AdornmentAriaLabel="Показать пароль"></MudTextField>
            </div>
            <div class="form-group" style="display: flex; justify-content:center; margin: 3% 0 0 0">
                <button name="regButton" class="btn btn-primary" @onclick=Register>Зарегистрироваться</button>
            </div>
        </div>
    </div>

    @if (isError)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
}
else
{
    <div class="modal-body">
        <h5>Выйдите с аккаунта</h5>
        <p>Чтобы зарегистрировать новый аккаунт, нужно сначала выйти со своего аккаунта</p>
        <p><button class="btn btn-secondary popover-test" @onclick=UserService.LogOut>Выйти с аккаунта</button></p>
    </div>
}

@code {
    string reg_name = "";
    string reg_surname = "";
    string reg_email = "";
    string reg_phoneNumber = "";
    string reg_pass = "";
    bool isError = false;
    string errorMessage = "";
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;


    private void Register()
    {
        if (reg_name != "" && reg_surname != "" && reg_email != "" && reg_phoneNumber != "" && reg_pass != "")
        {
            if (UserService.CheckEmail(reg_email))
            {
                isError = true;
                errorMessage = "Пользователь с такой почтой уже существует";
                return;
            }

            if (UserService.CheckPhoneNumber(reg_phoneNumber))
            {
                isError = true;
                errorMessage = "Пользователь с таким телефонным номером уже существует";
                return;
            }

            if (UserService.CheckCorrectEmail(reg_email))
            {
                isError = true;
                errorMessage = "Некорректный Email";
                return;
            }

            if(UserService.CheckCorrectPhoneNumber(reg_phoneNumber))
            {
                isError = true;
                errorMessage = "Некорректный номер телефона";
                return;
            }

            User user = new User(reg_name, reg_surname, reg_email, reg_phoneNumber, reg_pass);
            UserService.RegisterUser(user);
            UserService.AuthorizeUser(user.Email, user.Password);
            isError = false;
            ClearPage();
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Не все поля заполнены!";
            isError = true;
        }
    }

    void ButtonTestClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private void ClearPage()
    {
        reg_name = "";
        reg_surname = "";
        reg_email = "";
        reg_phoneNumber = "";
        reg_pass = "";
    }
}
