@page "/create-item-type"
@inject ItemService ItemService

<div class="card" style="width: 40%; margin: 100px 30% 0 30%">
    <div class="card-header">
        <h3 style="display: flex; justify-content:center; align-content: center">Добавление нового типа предмета</h3>
    </div>
    <div class="card-body">
        <div class="form-group">
            <div class="card-body">
                <MudSelect @bind-Value="selectedTitleItemCategory1" T="string" Label="Категория предмета обмена" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.CenterRight"
                           Variant="Variant.Filled" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
                    @foreach (var s in allTitlesItemCategories)
                    {
                        <MudSelectItem T="string" Value="@s">@s</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </div>
        <div class="form-group">
            <MudTextField @bind-Value="titleItemType" Label="Название типа предмета" Clearable="true" Immediate="true" Variant="Variant.Filled"></MudTextField>
        </div>
        <div class="form-group">
            <MudTextField @bind-Value="valueType1" HelperText="Натуральное число" HelperTextOnFocus="true" Label="Ценность типа предмета" Clearable="true" Immediate="true" Variant="Variant.Filled"></MudTextField>
        </div>
        <div class="form-group" style="display: flex; justify-content:center; margin: 3%">
            <button class="btn btn-primary" @onclick=CreateType>Добавить тип</button>
        </div>
    </div>
</div>

@if (isError && numberAlert == 1)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<div class="card" style="width: 40%; margin: 100px 30% 0 30%">
    <div class="card-header">
        <h3 style="display: flex; justify-content:center; align-content: center">Изменение ценности типа предмета</h3>
    </div>
    <div class="card-body">
        <div class="form-group">
            <div class="card-body">
                <MudSelect @bind-Value="selectedTitleItemCategory2" T="string" Label="Категория предмета обмена" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.CenterRight"
                           Variant="Variant.Filled" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" SelectedValuesChanged="() => UpdateTypesList(1)">
                    @foreach (var s in allTitlesItemCategories)
                    {
                        <MudSelectItem T="string" Value="@s">@s</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </div>
        <div class="form-group">
            <div class="card-body">
                <MudSelect @bind-Value="selectedTitleItemType1" T="string" Label="Тип предмета обмена" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.CenterRight"
                           Variant="Variant.Filled" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
                    @foreach (var s in titlesItemTypes1)
                    {
                        <MudSelectItem T="string" Value="@s">@s</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </div>
        <div class="form-group">
            <MudTextField @bind-Value="valueType2" HelperText="Натуральное число" HelperTextOnFocus="true" Label="Ценность типа предмета" Clearable="true" Immediate="true" Variant="Variant.Filled"></MudTextField>
        </div>
        <div class="form-group" style="display: flex; justify-content:center; margin: 3%">
            <button class="btn btn-primary" @onclick=EditType>Редактировать тип</button>
        </div>
    </div>
</div>

@if (isError && numberAlert == 2)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<div class="card" style="width: 40%; margin: 100px 30% 0 30%">
    <div class="card-header">
        <h3 style="display: flex; justify-content:center; align-content: center">Удаление типа предмета</h3>
    </div>
    <div class="card-body">
        <div class="form-group">
            <div class="card-body">
                <MudSelect @bind-Value="selectedTitleItemCategory3" T="string" Label="Категория предмета обмена" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.CenterRight"
                           Variant="Variant.Filled" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" SelectedValuesChanged="() => UpdateTypesList(2)">
                    @foreach (var s in allTitlesItemCategories)
                    {
                        <MudSelectItem T="string" Value="@s">@s</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </div>
        <div class="form-group">
            <div class="card-body">
                <MudSelect @bind-Value="selectedTitleItemType2" T="string" Label="Тип предмета обмена" AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.CenterRight"
                           Variant="Variant.Filled" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
                    @foreach (var s in titlesItemTypes2)
                    {
                        <MudSelectItem T="string" Value="@s">@s</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </div>
        <div class="form-group" style="display: flex; justify-content:center; margin: 3%">
            <button class="btn btn-primary" @onclick=DeleteType>Удалить тип</button>
        </div>
    </div>
</div>

@if (isError && numberAlert == 3)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@code {
    string selectedTitleItemCategory1 = "";
    string selectedTitleItemCategory2 = "";
    string selectedTitleItemCategory3 = "";
    string titleItemType = "";
    string selectedTitleItemType1 = "";
    string selectedTitleItemType2 = "";
    string valueType1 = "";
    string valueType2 = "";
    List<string> allTitlesItemCategories = new List<string>();
    List<string> titlesItemTypes1 = new List<string>();
    List<string> titlesItemTypes2 = new List<string>();
    bool isError;
    string errorMessage = "";
    int numberAlert;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        allTitlesItemCategories = ItemService.GetTitlesItemCategories();
    }

    private void UpdateTypesList(int numberList)
    {
        if(numberList == 1)
        {
            selectedTitleItemType1 = "";
            titlesItemTypes1 = ItemService.GetTitlesItemTypesByCategory
                (ItemService.GetItemCategoryByTitle(selectedTitleItemCategory2).ItemCategoryId);
        }
        else
        {
            selectedTitleItemType2 = "";
            titlesItemTypes2 = ItemService.GetTitlesItemTypesByCategory
                (ItemService.GetItemCategoryByTitle(selectedTitleItemCategory3).ItemCategoryId);
        }
    }

    public void CreateType()
    {
        int value;
        ResetAlert();

        if (selectedTitleItemCategory1 == "")
        {
            CreateAlert(1, "Выберите категорию предмета, к которому будет относится тип!");
            return;
        }

        if (titleItemType == "" || valueType1 == "")
        {
            CreateAlert(1, "Не все поля заполнены!");
            return;
        }

        if (!int.TryParse(valueType1, out value) || !(value == Math.Truncate((double)value)))
        {
            CreateAlert(1, "Ценность типа предмета должна быть натуральным числом!");
            return;
        }

        if (ItemService.CheckItemType(titleItemType))
        {
            CreateAlert(1, "Тип предмета с таким названием уже существует!");
            return;
        }

        ItemService.CreateItemType(new ItemType(ItemService.GetItemCategoryByTitle(selectedTitleItemCategory1).ItemCategoryId,
            titleItemType, value));
        selectedTitleItemCategory1 = "";
        titleItemType = "";
        valueType1 = "";
    }

    public void EditType()
    {
        int value;
        ResetAlert();

        if (selectedTitleItemCategory2 == "" || selectedTitleItemType1 == "")
        {
            CreateAlert(2, "Выберите категорию и тип предмета!");
            return;
        }

        if (valueType2 == "")
        {
            CreateAlert(2, "Заполните поле ценности!");
            return;
        }

        if (!int.TryParse(valueType2, out value) || !(value == Math.Truncate((double)value)))
        {
            CreateAlert(2, "Ценность типа предмета должна быть натуральным числом!");
            return;
        }

        ItemService.EditItemType(selectedTitleItemType1, value);
        selectedTitleItemCategory2 = "";
        selectedTitleItemType1 = "";
        titlesItemTypes1.Clear();
        valueType2 = "";
    }

    public void DeleteType()
    {
        ResetAlert();

        if (selectedTitleItemCategory3 == "" || selectedTitleItemType2 == "")
        {
            CreateAlert(3, "Выберите категорию и тип предмета!");
            return;
        }


        if(ItemService.CheckItemTypeAvailabilityOfOrder
            (ItemService.GetItemTypeByTitle(selectedTitleItemType2).ItemTypeId))
        {
            ItemService.DeleteItemType(selectedTitleItemType2);
            CreateAlert(3, "Нельзя удалить тип предмета, так как с этим типом уже созданы объявления обмена!");
        }
        selectedTitleItemCategory3 = "";
        selectedTitleItemType2 = "";
        titlesItemTypes2.Clear();
    }

    public void CreateAlert(int numAlert, string message)
    {
        isError = true;
        numberAlert = numAlert;
        errorMessage = message;
    }

    public void ResetAlert()
    {
        isError = false;
        numberAlert = 0;
    }


}
