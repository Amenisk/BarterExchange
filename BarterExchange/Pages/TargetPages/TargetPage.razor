@page "/target"

@inject ExchangeOrderService ExchangeOrderService
@inject UserService UserService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

@if (UserService.IsAuthorized())
{
    <MudTable Items="@target.TargetLevels" Hover="true" LoadingProgressColor="Color.Info" Style="width: 90%; margin: 0 5% 0 5%">
    <ToolBarContent>
        <div style="width: 100%">
            <MudText Typo="Typo.h3" Style="display: flex; justify-content:center">@target.StartOrder.Title → @target.TargetNameItem</MudText>
        </div>       
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Уровень</MudTh>
        <MudTh>Обмены</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd style="width: 120px; margin: 2%">
            <MudText Style="font-size: 64px" Class="d-flex justify-center align-center">@(target.TargetLevels.IndexOf(context) + 1)</MudText>
        </MudTd>
        <MudTd>
             <div class="card-group" style="width: 100%; margin: 10px 0 0 0">
                @foreach (var o in GetOffers(context))
                {
                    <MudCard Outlined="true" style="width: 240; margin: 2%">
                        <MudCardHeader Style="height: 20px">
                            <CardHeaderAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="() => RemoveOffer(o)" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent Class="d-flex justify-center align-center">
                            <MudCard Outlined="true" style="width: 130; margin: 2%">
                                @if (o.SenderExchangeOrdersId.Count() == 1)
                                {
                                    <MudCardContent>
                                        <MudImage Src=@("Images/" + @ExchangeOrderService.GetExchangeOrder(o.SenderExchangeOrdersId.First()).PhotoName) Elevation="25" Class="rounded-lg" Width="125" Height="125" />
                                    </MudCardContent>
                                    <MudCardActions style="display: flex; justify-content:center">
                                        <MudButton Variant="Variant.Text" Style="font-size: 10px" Color="Color.Primary" OnClick="() => OpenOrderPage(o.SenderExchangeOrdersId.First())">@ExchangeOrderService.CutName(@ExchangeOrderService.GetExchangeOrder(o.SenderExchangeOrdersId.First()).Title)</MudButton>
                                    </MudCardActions>
                                }
                                else
                                {
                                    @foreach (var s in o.SenderExchangeOrdersId)
                                    {
                                        <MudCardActions style="display: flex; justify-content:center">
                                            <MudButton Variant="Variant.Text" Style="font-size: 10px" Color="Color.Primary" OnClick="() => OpenOrderPage(s)">@ExchangeOrderService.CutName(@ExchangeOrderService.GetExchangeOrder(s).Title)</MudButton>
                                        </MudCardActions>
                                    }
                                }
                            </MudCard>


                            <div style="display: flex; justify-content:center">
                                <MudImage Src="Images/rightArrow.png" Height="30"  Style="margin: 40% 0 40% 0" />
                            </div>


                            <MudCard Outlined="true" style="width: 110; margin: 2%">
                                @if (o.RecipientExchangeOrdersId.Count() == 1)
                                {
                                    <MudCardContent>
                                        <MudImage Src=@("Images/" + @ExchangeOrderService.GetExchangeOrder(o.RecipientExchangeOrdersId.First()).PhotoName) Elevation="25" Class="rounded-lg" Width="125" Height="125" />
                                    </MudCardContent>
                                    <MudCardActions style="display: flex; justify-content:center">
                                        <MudButton Variant="Variant.Text" Style="font-size: 10px" Color="Color.Primary" OnClick="() => OpenOrderPage(o.RecipientExchangeOrdersId.First())">@ExchangeOrderService.CutName(@ExchangeOrderService.GetExchangeOrder(o.RecipientExchangeOrdersId.First()).Title)</MudButton>
                                    </MudCardActions>
                                }
                                else
                                {
                                    @foreach (var s in o.RecipientExchangeOrdersId)
                                    {
                                        <MudCardActions style="display: flex; justify-content:center">
                                            <MudButton Variant="Variant.Text" Style="font-size: 10px" Color="Color.Primary" OnClick="() => OpenOrderPage(s)">@ExchangeOrderService.CutName(@ExchangeOrderService.GetExchangeOrder(s).Title)</MudButton>
                                        </MudCardActions>
                                    }
                                }
                            </MudCard>
                        </MudCardContent>
                    </MudCard>
                }
             </div>          
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<div style="margin: 2%" Class="d-flex justify-center align-center">
    <Tooltip Title="Можно добавлять только созданные предложения обмена!">
        <MudButton Variant="Variant.Outlined" Style="margin: 5px; font-size: 24px" Color="Color.Primary" OnClick="OpenConductedOffersPage">Добавить обмен</MudButton>
    </Tooltip>
    
</div>
}
else
{
    <NotAuthorizedComponent></NotAuthorizedComponent>
}

@code {
    Target target { get; set; }
    List<ExchangeOrderOffer> offers;
    int level;
    ExchangeOrder senderOrder;
    ExchangeOrder recepientOrder;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (!UserService.IsAuthorized())
        {
            return;
        }
        target = ExchangeOrderService.CurrentTarget;

        if(ExchangeOrderService.SelectedOffer != null)
        {
            target.AddLevel(ExchangeOrderService.SelectedOffer);
            ExchangeOrderService.SelectedOffer = null;
            ExchangeOrderService.UpdateTarget(target);
        }
    }

    private void OpenOrderPage(int id)
    {
        Navigation.NavigateTo("/order");
        ExchangeOrderService.ChangeCurrentExchangeOrder(id);
    }

    private void OpenConductedOffersPage()
    {
        if(target.EndDate != DateTime.MinValue)
        {
            Snackbar.Add("Нельзя добавлять новые обмены в завершенную цель!", Severity.Error);
            return;
        }

        if (ExchangeOrderService.GetAvailableOrdersId(ExchangeOrderService.CurrentTarget.TargetId).Count == 0)
        {
            Snackbar.Add("Нет подходящих обменов!", Severity.Warning);
            return;
        }

        Navigation.NavigateTo("/conducted-offers");
    }

    private List<ExchangeOrderOffer> GetOffers(List<int> offersId)
    {
        var offers = new List<ExchangeOrderOffer>();

        foreach(var id in offersId)
        {
            offers.Add(ExchangeOrderService.GetExchangeOfferById(id));
        }

        return offers;
    }

    private void RemoveOffer(ExchangeOrderOffer offer)
    {
        bool isRemoved = false;

        foreach(var level in target.TargetLevels)
        {
            foreach(var id in level)
            {
                if(offer.ExchangeOfferId == id)
                {
                    if(target.TargetLevels.Last() == level)
                    {
                        target.RemoveOfferFromLastLevel(offer);
                        isRemoved = true;
                        break;
                    }
                    else if (target.CheckButOneLevel(level))
                    {
                        target.RemoveOfferFromButOneLevel(offer);
                        isRemoved = true;
                        break;
                    }
                    else
                    {
                        Snackbar.Add("Обмен можно удалить только с последнего заполненного уровня!", Severity.Error);
                        return;
                    }
                }
            }

            if(isRemoved)
            {
                Snackbar.Add("Обмен успешно удален из цели!", Severity.Success);
                ExchangeOrderService.UpdateTarget(target);
                return;
            }
        }
    }   
}

