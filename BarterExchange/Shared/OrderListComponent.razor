@inject ExchangeOrderService ExchangeOrderService
@inject NavigationManager Navigation
@inject FileSystemService FileSystemService
@inject UserService UserService
@inject ItemService ItemService
@inject ExchangeOrderService ExchangeOrderService
@inject ISnackbar Snackbar

@if(!IsCreatedOrders && !IsOfferOrders && !IsTargetOrder)
{
    <div class="card">
        <div class="card-body" style="display: flex; flex-direction: row; justify-content: flex-start">
            <MudTextField @bind-Value="@searchText" HelperText="Поиск по названию объявления, категории и типу предмета" Label="Поиск"
                      Style="width: 50%" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="Search" />
            @if(UserService.CurrentUser != null && ExchangeOrderService.CheckAvailabilityExchangeOrders(UserService.CurrentUser.Email))
            {
                <MudCheckBox T="bool" Label="Рекомендуемые обмены" LabelPosition="LabelPosition.Start" Color="Color.Secondary" CheckedChanged="@(e => GetRecomendedOrders((bool)e))"></MudCheckBox>
            }         
        </div>
    </div>
}
@if(RecomendedOrders == null)
{
    <div class="card-group" style="width: 100%; margin: 10px 0 0 0">
        @foreach (var exch in AllExchangeOrders.Skip((_selected - 1) * 16).Take(16).ToList())
        {
            <MudCard Outlined="true" style="width: 280; margin: 2%">
                <MudCardContent Class="d-flex justify-center align-center">
                    <MudImage Src=@("Images/" + @exch.PhotoName) Elevation="25" Class="rounded-lg" Style="width: 250px; height: 250px" />
                </MudCardContent>
                <MudCardActions style="display: flex; justify-content:center">
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(exch.ExchangeOrderId)">@ExchangeOrderService.CutName(exch.Title)</MudButton>
                </MudCardActions>
            </MudCard>
        }
    </div>
}
else
{
    <div class="card-group" style="width: 100%; margin: 10px 0 0 0">
        @foreach (var exch in RecomendedOrders)
        {
            if(exch.Count == 1)
            {
                <MudCard Outlined="true" style="width: 280; margin: 2%">
                    <MudCardContent>
                        <MudImage Src=@("Images/" + @exch.First().PhotoName) Elevation="25" Class="rounded-lg" Width="250" Height="250" />
                    </MudCardContent>
                    <MudCardActions style="display: flex; justify-content:center">
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(exch.First().ExchangeOrderId)">@ExchangeOrderService.CutName(exch.First().Title)</MudButton>
                    </MudCardActions>
                </MudCard>
            }
            else
            {
                    <MudCard Outlined="true" style="width: 280; margin: 2%">
                        @foreach (var o in exch)
                        {
                            <MudCardActions style="display: flex; justify-content:center">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(exch)">@ExchangeOrderService.CutName(o.Title)</MudButton>                        
                            </MudCardActions>
                        }
                    </MudCard>
            }

        }
    </div>
}
@if(RecomendedOrders == null)
{
    <div class="d-flex flex-column align-center" style="margin: 3%">
        <MudPagination BoundaryCount="2" MiddleCount="5" Count="@(AllExchangeOrders.Count() / 16 + GetNumber(AllExchangeOrders.Count()))" @bind-Selected="@_selected" Class="mt-4" />
    </div>
}
else
{
    <div class="d-flex flex-column align-center" style="margin: 3%">
        <MudPagination BoundaryCount="2" MiddleCount="5" Count="@(RecomendedOrders.Count() / 16 + GetNumber(RecomendedOrders.Count()))" @bind-Selected="@_selected" Class="mt-4" />
    </div>
}



@code {
    [Parameter]
    public List<ExchangeOrder> AllExchangeOrders { get; set; }
    [Parameter]
    public List<List<ExchangeOrder>> RecomendedOrders { get; set; }
    [Parameter]
    public bool IsCreatedOrders { get; set; }
    [Parameter]
    public bool IsOfferOrders { get; set; }
    [Parameter]
    public bool IsTargetOrder{ get; set; }
    string searchText = "";
    bool isRecomendedOrders;
    public List<ExchangeOrder> removedOrders = new List<ExchangeOrder>();
    int _selected = 1;
    int countPages = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (!UserService.IsAuthorized())
        {
            return;
        }
        bool isRemoved;
        UserService.ReloadVipLevel();


        if(RecomendedOrders == null)
        {
            foreach (var e in AllExchangeOrders)
            {
                FileSystemService.DownloadImage(e.PhotoName);
                isRemoved = false;

                foreach (var s in ExchangeOrderService.SenderOrders)
                {
                    if (e.ExchangeOrderId == s.ExchangeOrderId)
                    {
                        removedOrders.Add(e);
                        isRemoved = true;
                    }
                }

                if (!isRemoved)
                {
                    foreach (var r in ExchangeOrderService.RecepientOrders)
                    {
                        if (e.ExchangeOrderId == r.ExchangeOrderId)
                        {
                            removedOrders.Add(e);
                        }
                    }
                }
            }

            if(IsOfferOrders)
            {
                foreach (var r in removedOrders)
                {
                    AllExchangeOrders.Remove(r);
                }
            }         
        }
    }

    private int GetNumber(int num)
    {
        if(num % 16 == 0)
        {
            return 0;
        }
        else
        {
            return 1;
        }
    }

    private void OpenOrderPage(int id)
    {
        if(IsOfferOrders)
        {

            if(ExchangeOrderService.IsSenderOrders)
            {
                ExchangeOrderService.SenderOrders.Add(ExchangeOrderService.GetExchangeOrder(id));
                Snackbar.Add("Предмет успешно добавлен в список обмена!", Severity.Success);
            }
            else
            {
                ExchangeOrderService.RecepientOrders.Add(ExchangeOrderService.GetExchangeOrder(id));
                Snackbar.Add("Предмет успешно добавлен в список обмена!", Severity.Success);
            }

            Navigation.NavigateTo("/main-offer");
            return;
        }

        ExchangeOrderService.ChangeCurrentExchangeOrder(id);

        if(IsTargetOrder)
        {
            Navigation.NavigateTo("/create-target");
            Snackbar.Add("Стартовый предмет успешно добавлен в цель!", Severity.Success);
            return;
        }

        if(IsCreatedOrders == false)
        {
            Navigation.NavigateTo("/order");
            if(isRecomendedOrders)
            {
                ExchangeOrderService.ValueItemType = ItemService.GetItemTypeById(ExchangeOrderService.GetExchangeOrder(id).ItemTypeId).Value;
            }
            else
            {
                ExchangeOrderService.ValueItemType = 0;
            }
        }
        else
        {
            Navigation.NavigateTo("/created-order");
        }
    }

    private void OpenOrderPage(List<ExchangeOrder> orders)
    {
        foreach(var o in orders)
        {
            if (ExchangeOrderService.IsSenderOrders)
            {
                ExchangeOrderService.SenderOrders.Add(ExchangeOrderService.GetExchangeOrder(o.ExchangeOrderId));
                Snackbar.Add("Предмет/ы успешно добавлен в список обмена!", Severity.Success);
            }
            else
            {
                ExchangeOrderService.RecepientOrders.Add(ExchangeOrderService.GetExchangeOrder(o.ExchangeOrderId));
                Snackbar.Add("Предмет/ы успешно добавлен в список обмена!", Severity.Success);
            }

            Navigation.NavigateTo("/main-offer");
        }    
    }

    private void Search()
    {
        if(searchText != "")
        {
            AllExchangeOrders = ExchangeOrderService.GetListExchangeOrdersBySearch(searchText);
        }
        else
        {
            AllExchangeOrders = ExchangeOrderService.GetAllExchangeOrders();
        }
    }

    private void GetRecomendedOrders(bool check)
    {
        if (check)
        {
            if (ExchangeOrderService.GetRecomendedOrders(UserService.CurrentUser.Email).Count != 0)
            {
                isRecomendedOrders = true;
                AllExchangeOrders = ExchangeOrderService.GetRecomendedOrders(UserService.CurrentUser.Email);
                Snackbar.Add("Найдены рекомендованные объявления обмена!", Severity.Info);
            }
            else
            {
                Snackbar.Add("Нет рекомендованных объявлений обмена!", Severity.Warning);
            } 
        }
        else
        {
            isRecomendedOrders = false;
            AllExchangeOrders = ExchangeOrderService.GetAllExchangeOrders();
        }
    }
}
