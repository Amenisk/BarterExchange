@inject ExchangeOrderService ExchangeOrderService
@inject NavigationManager Navigation
@inject UserService UserService
@inject ISnackbar Snackbar

<div class="card" style="margin: 2%">
    <div class="card-body" style="display: flex; flex-direction: row; justify-content: flex-start">
        <MudTextField @bind-Value="@searchText" HelperText="Поиск по названию объявления, категории и типу предмета" Label="Поиск"
                      Style="width: 50%" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="Search" />
    </div>
</div>

<MudTable Items="@sortOffers" Hover="true" LoadingProgressColor="Color.Info" Style="width: 60%; margin: 0 20% 0 20%">
    <HeaderContent>
        <MudTh>Отдаёте</MudTh>
        <MudTh></MudTh>
        <MudTh>Получаете</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd >
            <div class="item-card">
                <MudCard Outlined="true">
                    @if (!IsRecieved)
                    {
                        @if (context.SenderExchangeOrdersId.Count() == 1)
                        {
                            <MudCardContent Class="d-flex justify-center align-center">
                                <div class="image">
                                    <MudImage Src=@("Images/" + @ExchangeOrderService.GetExchangeOrder(context.SenderExchangeOrdersId.First()).PhotoName) Elevation="25" Class="rounded-lg" Style="width: 100%; height: 100%" />
                                </div>
                            </MudCardContent>
                            <MudCardActions style="display: flex; justify-content:center">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(context.SenderExchangeOrdersId.First())"><div class="item-name">@ExchangeOrderService.CutName(@ExchangeOrderService.GetExchangeOrder(context.SenderExchangeOrdersId.First()).Title)</div></MudButton>
                            </MudCardActions>
                        }
                        else
                        {
                            @foreach(var s in context.SenderExchangeOrdersId)
                            {
                                <MudCardActions style="display: flex; justify-content:center">
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(s)"><div class="item-name">@ExchangeOrderService.CutName(@ExchangeOrderService.GetExchangeOrder(s).Title)</div></MudButton>
                                </MudCardActions>
                            }
                        
                        }       
                    }
                    else
                    {
                        @if (context.RecipientExchangeOrdersId.Count() == 1)
                        {
                            <MudCardContent Class="d-flex justify-center align-center">
                                <div class="image">
                                    <MudImage Src=@("Images/" + @ExchangeOrderService.GetExchangeOrder(context.RecipientExchangeOrdersId.First()).PhotoName) Elevation="25" Class="rounded-lg" Style="width: 100%; height: 100%" />
                                </div>
                            </MudCardContent>
                            <MudCardActions style="display: flex; justify-content:center">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(context.RecipientExchangeOrdersId.First())"><div class="item-name">@ExchangeOrderService.CutName(ExchangeOrderService.GetExchangeOrder(context.RecipientExchangeOrdersId.First()).Title)</div></MudButton>
                            </MudCardActions>
                        }
                        else
                        {
                            @foreach (var s in context.RecipientExchangeOrdersId)
                            {
                                <MudCardActions style="display: flex; justify-content:center">
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(s)"><div class="item-name">@ExchangeOrderService.CutName(ExchangeOrderService.GetExchangeOrder(s).Title)</div></MudButton>
                                </MudCardActions>
                            }
                        }
                    }
                </MudCard>
            </div>
        </MudTd>
        <MudTd Style="display: flex; justify-content:center">
            @if (!IsRecieved)
            {
                <div>
                    <div style="display: flex; justify-content:center">
                        <div class="arrow">
                            <MudImage Src="Images/rightArrow.png" Height="50" />
                        </div>           
                    </div>
                    @if(!context.IsConducted)
                    {
                    <div>
                            <button class="btn btn-primary" @onclick=@(() => RejectOffer(context)) style="margin: 15px 0 0 0">Отменить обмен</button>
                    </div>
                    }
                </div>             
            }
            else
            {
                <div>
                    <div style="display: flex; justify-content:center">
                        <div class="arrow">
                            <MudImage Src="Images/rightArrow.png" Height="50" />
                        </div>
                    </div>
                    <div>
                        <button class="btn btn-primary" @onclick=@(() => AcceptOffer(context)) style="margin: 15px 0 0 0">Принять обмен</button>
                        <button class="btn btn-primary" @onclick=@(() => RejectOffer(context)) style="margin: 15px 0 0 0">Отклонить обмен</button>
                    </div>
                </div>
            }

        </MudTd>
        <MudTd >
            <div class="item-card">
                <MudCard Outlined="true">
                    @if (!IsRecieved)
                    {
                        @if (context.RecipientExchangeOrdersId.Count() == 1)
                        {
                            <MudCardContent Class="d-flex justify-center align-center">
                                <div class="image">
                                    <MudImage Src=@("Images/" + @ExchangeOrderService.GetExchangeOrder(context.RecipientExchangeOrdersId.First()).PhotoName) Elevation="25" Class="rounded-lg" Style="width: 100%; height: 100%" />
                                </div>
                            </MudCardContent>
                            <MudCardActions style="display: flex; justify-content:center">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(context.RecipientExchangeOrdersId.First())"><div class="item-name">@ExchangeOrderService.CutName(ExchangeOrderService.GetExchangeOrder(context.RecipientExchangeOrdersId.First()).Title)</div></MudButton>
                            </MudCardActions>
                        }
                        else
                        {
                            @foreach (var s in context.RecipientExchangeOrdersId)
                            {
                                <MudCardActions style="display: flex; justify-content:center">
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(s)"><div class="item-name">@ExchangeOrderService.CutName(ExchangeOrderService.GetExchangeOrder(s).Title)</div>s</MudButton>
                                </MudCardActions>
                            }
                        }
                    }
                    else
                    {
                        @if (context.SenderExchangeOrdersId.Count() == 1)
                        {
                            <MudCardContent Class="d-flex justify-center align-center">
                                <div class="image">
                                    <MudImage Src=@("Images/" + @ExchangeOrderService.GetExchangeOrder(context.SenderExchangeOrdersId.First()).PhotoName) Elevation="25" Class="rounded-lg" Style="width: 100%; height: 100%" />
                                </div>
                            </MudCardContent>
                            <MudCardActions style="display: flex; justify-content:center">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(context.SenderExchangeOrdersId.First())"><div class="item-name">@ExchangeOrderService.CutName(ExchangeOrderService.GetExchangeOrder(context.SenderExchangeOrdersId.First()).Title)</div></MudButton>
                            </MudCardActions>
                        }
                        else
                        {
                            @foreach (var s in context.SenderExchangeOrdersId)
                            {
                                <MudCardActions style="display: flex; justify-content:center">
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenOrderPage(s)"><div class="item-name">@ExchangeOrderService.CutName(ExchangeOrderService.GetExchangeOrder(s).Title)</div></MudButton>
                                </MudCardActions>
                            }
                        }
                    }
                </MudCard>
            </div>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>




@code {
    [Parameter]
    public bool IsRecieved { get; set; }
    [Parameter]
    public List<ExchangeOrderOffer> Offers { get; set; }
    List<ExchangeOrderOffer> sortOffers { get; set; }
    string searchText = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        sortOffers = Offers;
    }

    private void OpenOrderPage(int id)
    {
        ExchangeOrderService.ChangeCurrentExchangeOrder(id);
        Navigation.NavigateTo("/order-information");
    }

    private void AcceptOffer(ExchangeOrderOffer offer)
    {
        ExchangeOrderService.AcceptExchangeOffer(offer);
        Navigation.NavigateTo("/main");
        Snackbar.Add("Предложение обмена успешно принято!", Severity.Success);
    }

    private void RejectOffer(ExchangeOrderOffer offer)
    {
        ExchangeOrderService.RejectExchangeOffer(offer.ExchangeOfferId);
        Navigation.NavigateTo("/main");
        Snackbar.Add("Предложение обмена успешно отклонено!", Severity.Success);
    }

    private void Search()
    {
        if(searchText != "")
        {
            sortOffers = ExchangeOrderService.SearchOffers(searchText, Offers);
        }
        else
        {
            sortOffers = Offers;
        }
    }
}